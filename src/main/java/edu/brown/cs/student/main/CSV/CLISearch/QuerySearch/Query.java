package edu.brown.cs.student.main.CSV.CLISearch.QuerySearch;


import edu.brown.cs.student.main.CSV.CLISearch.QuerySearch.Exceptions.SearchArgumentException;

import java.util.ArrayList;
import java.util.List;

public interface Query {

  //constants
  String AND = "and";
  String OR = "or";
  String NOT = "not";
  String COLUMN = "col";
  String BASIC = "";


  List<Integer> findRows(Searcher searcher);
  String getText();
  void parseText(String text) throws SearchArgumentException;


  //generated by chat gpt
  default List<String> separateString(String input) {
    List<String> separatedStrings = new ArrayList<>();
    StringBuilder currentString = new StringBuilder();
    int parenthesesDepth = 0;

    for (char c : input.toCharArray()) {
      if (c == '(') {
        parenthesesDepth++;
      } else if (c == ')') {
        parenthesesDepth--;
      }

      if (c == ',' && parenthesesDepth == 0) {
        separatedStrings.add(currentString.toString().trim());
        currentString.setLength(0);
      } else {
        currentString.append(c);
      }
    }

    if (!currentString.isEmpty()) {
      separatedStrings.add(currentString.toString().trim());
    }

    return separatedStrings;
  }

//  default void createQueryFromText(String text) {
//    //read until (
//    String[] parts = text.split("\\([^(]*\\)");
//    String keyword = parts[0];
//
//    String insideText = getTextBetweenParentheses(text);
//
//    switch (keyword) {
//        case AND -> new AndQuery(this);
//        case OR -> new OrQuery(this);
//        case NOT -> new NotQuery(this);
//        case COLUMN -> new ColumnQuery(this);
//        case BASIC -> new BasicQuery(this);
//        default -> throw new IllegalStateException("Unexpected value: " + keyword);
//    }
//  }

//  default boolean compareStrings(String s1, String s2, boolean ignoreCase) {
//    if (ignoreCase) {
//      return s1.equalsIgnoreCase(s2);
//    } else {
//      return s1.equals(s2);
//    }
//  }
//
//  default boolean searchRow(List<String> rowVals, String searchVal, boolean ignoreCase) {
//    for (String rowVal:rowVals) {
//      if (compareStrings(rowVal, searchVal, ignoreCase)) {
//        break;
//      }
//    }
//    return false;
//  }

//  //generated by chat gpt
//  default String getTextBetweenParentheses(String input) {
//    StringBuilder result = new StringBuilder();
//    Deque<Character> stack = new ArrayDeque<>();
//
//    boolean insideParentheses = false;
//
//    for (char c : input.toCharArray()) {
//      if (c == '(') {
//        if (!stack.isEmpty() && stack.peek() == '\'') {
//          result.append(c);
//        } else {
//          stack.push(c);
//          insideParentheses = true;
//        }
//      } else if (c == ')') {
//        if (!stack.isEmpty() && stack.peek() == '\'') {
//          result.append(c);
//        } else {
//          stack.pop();
//          if (stack.isEmpty()) {
//            insideParentheses = false;
//          }
//        }
//      } else {
//        if (insideParentheses) {
//          result.append(c);
//        }
//      }
//    }
//
//    return result.toString();
//  }

}
